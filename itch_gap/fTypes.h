//---------------------------------------------------------------------------------------------
//
// Copyright (c) 2022, fmad engineering llc
//
//---------------------------------------------------------------------------------------------

#ifndef __F_TYPES_H__
#define __F_TYPES_H__

typedef unsigned int		bool;
#define true				1
#define false				0

typedef unsigned char		u8;
typedef char				s8;

typedef unsigned short		u16;
typedef short				s16;

typedef unsigned int		u32;
typedef int					s32;

typedef unsigned long long	u64;
typedef long long			s64;

static inline u32 swap32(const u32 a)
{
	return (((a>>24)&0xFF)<<0) | (((a>>16)&0xFF)<<8) | (((a>>8)&0xFF)<<16) | (((a>>0)&0xFF)<<24);
}

static inline u16 swap16(const u16 a)
{
	return (((a>>8)&0xFF)<<0) | (((a>>0)&0xFF)<<8);
}

static inline u64 swap64(const u64 a)
{
	return swap32(a>>32ULL) | ( (u64)swap32(a) << 32ULL);
}

typedef struct
{
	u32				magic;
	u16				major;
	u16				minor;
	u32				timezone;
	u32				sigflag;
	u32				snaplen;
	u32				link;

} __attribute__((packed)) PCAPHeader_t;

typedef struct
{
	u32				sec;				// time stamp sec since epoch
	u32				nsec;				// nsec fraction since epoch

	u32				length_capture;	// captured length, inc trailing / aligned data
	u32				length_wire;		// length on the wire

} __attribute__((packed)) PCAPPacket_t;

#define PCAPHEADER_MAGIC_NANO		0xa1b23c4d
#define PCAPHEADER_MAGIC_USEC		0xa1b2c3d4


// ethernet header
typedef struct
{
	u8		Dst[6];
	u8		Src[6];
	u16		Proto;

} __attribute__((packed)) fEther_t;

typedef struct
{
	u16			VIDhi	: 4;
	u16			DEI		: 1;
	u16			PCP		: 3;
	u16			VIDlo	: 8;

} __attribute__((packed)) VLANTag_t;
#define VLANTag_ID(a) (( a->VIDhi << 8 ) | a->VIDlo )

#define ETHER_PROTO_IPV4		0x0800
#define ETHER_PROTO_VLAN		0x8100
#define ETHER_PROTO_IPV6		0x86dd
#define ETHER_PROTO_IP			0x0888		// special made up type indicating ipv4 or ipv6

typedef struct
{
	union
	{
		u8		IP[4];
		u32	IP4;
	};

} IP4_t;

typedef struct
{
	u8		Version;
	u8		Service;
	u16		Len;
	u16		Ident;
	u16		Frag;
	u8		TTL;
	u8		Proto;
	u16		CSum;

	IP4_t	Src;
	IP4_t	Dst;

} __attribute__((packed)) IP4Header_t;

#define IPv4_PROTO_ICMP			1
#define IPv4_PROTO_IGMP			2
#define IPv4_PROTO_TCP			6
#define IPv4_PROTO_UDP			17
#define IPv4_PROTO_GRE			0x2f
#define IPv4_PROTO_VRRP			0x70

typedef struct
{
	u16			PortSrc;
	u16			PortDst;
	u16			Length;
	u16			CSUM;

} __attribute__((packed)) UDPHeader_t;


//------------------------------------------------------------------------------------------------------
//
// MetaMako timestamp format
//

// meta mako packet format
typedef struct MetaMakoFooter_t
{
	u32             OrigFCS;            // orignial FCS
	u32             Sec;                // timestamp secconds     (big endian)
	u32             NSec;               // timestamp nanoseconds  (big endian)
	u8              Flag;               // flags
										// bit 0 : orig FCS is correct

	u16             DeviceID;           // metamako device id
	u8              PortID;             // metamako port number
	u32             MMakoFCS;           // packets new FCS generated by mmako

} __attribute__((packed)) MetaMakoFooter_t;

typedef struct GapRange_t GapRange_t;
struct GapRange_t
{
	// Last seen seq no. at the start of the gap
	u64 Start;
	// Last seen seq no. at the end the gap (meaning all numbers between the
	// range are missing/OOO)
	u64 End;

	double TS;

	GapRange_t *Next;
} __attribute__((packed));

typedef struct ITCHState_t ITCHState_t;
struct ITCHState_t
{
	u8 Session[10];
	u16 SrcPort;
	u16 DstPort;
	IP4_t SrcIP;
	IP4_t DstIP;
	u16 VLAN;

	u64 SeqStart;
	u64 SeqCurrent;

	// Timestamp of last stat output
	double TS;
	// Number of messages (since last output/sample)
	u64 MessageCount;

	// Count of sequence numbers that showed up Out Of Order (OOO)
	u64 SeqOOOCount;
	u64 SeqGapCount;
	GapRange_t *GapRanges;

	ITCHState_t *Next;
} __attribute__((packed));

// epoch in nanos
static u64 clock_ns(void)
{
	struct timeval tv;
	gettimeofday(&tv, NULL);

	return (u64)tv.tv_sec *(u64)1e9 +(u64)tv.tv_usec * (u64)1e3;
}

#define S_TO_NS 1e9

#define UDP_MAX_PKTLEN 65535

#endif
